station.locs = lapply(networks, riem::riem_stations) %>%
do.call(rbind)
networks = list('IL_ASOS', 'IN_ASOS', 'WI_ASOS')
library(dplyr, quietly = TRUE)
station.locs = lapply(networks, riem::riem_stations) %>%
do.call(rbind, .)
head(station.locs)
station.locs.sf = sf::st_as_sf(station.locs, coords = c("lon", "lat"), crs = 4326)
plot(station.locs.sf)
station.locs.sf = sf::st_as_sf(station.locs, coords = c("lon", "lat"), crs = 4326)
plot(station.locs.sf$geometry)
# Loading study area boundaries
study.area = st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson')
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson')
study.sensors = sf::st_join(sensor.locations.sf, study.area, left = FALSE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson')
study.sensors = sf::st_join(sensor.locations.sf, study.area, left = FALSE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)
study.sensors = sf::st_join(sensor.locations.sf, study.area, left = FALSE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)
study.sensors = sf::st_join(station.locs.sf, study.area, left = FALSE)
# Verify Spatial Join by Plotting
plot(study.area$geometry, border = 'red')
plot(study.sensors$geometry, add = TRUE)
title('Weather Stations Within the Study Area')
station.locs.sf = sf::st_as_sf(station.locs, coords = c("lon", "lat"), crs = 4326)
# Plot to verify that the correct sensors were selected
plot(station.locs.sf$geometry)
plot(sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE), border = 'red', add = TRUE)
station.locs.sf = sf::st_as_sf(station.locs, coords = c("lon", "lat"), crs = 4326)
# Plot to verify that the correct sensors were selected
plot(station.locs.sf$geometry)
plot(sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)$geometry, border = 'red', add = TRUE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)
study.sensors = sf::st_join(station.locs.sf, study.area, left = FALSE)
# Verify Spatial Join by Plotting
plot(study.area$geometry, border = 'red')
plot(study.sensors$geometry, add = TRUE)
title('Weather Stations Within the Study Area')
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, riem::riem_stations) %>%
do.call(rbind, .) # Creates a single data table as output
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, riem::riem_measures) %>%
do.call(rbind, .) # Creates a single data table as output
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, riem::riem_measures(date_start = "2014-01-01", date_end = "2014-01-02")) %>%
do.call(rbind, .) # Creates a single data table as output
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02")}) %>%
do.call(rbind, .) # Creates a single data table as output
head(station.locs)
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02"), quiet = TRUE}) %>%
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02", quietly = TRUE)}) %>%
do.call(rbind, .) # Creates a single data table as output
library(dplyr, quietly = TRUE)
station.locs = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02")}) %>%
do.call(rbind, .) # Creates a single data table as output
head(station.locs)
library(dplyr, quietly = TRUE)
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02")}) %>%
do.call(rbind, .) # Creates a single data table as output
head(weather.data)
study.sensors$id == weather.data$station
study.sensors$id %in% weather.data$station
swhich(tudy.sensors$id %in% weather.data$station)
which(tudy.sensors$id %in% weather.data$station)
which(study.sensors$id %in% weather.data$station)
which(study.sensors$id != weather.data$station)
which(study.sensors$id !(%in%) weather.data$station)
which(study.sensors$id %in% weather.data$station)
which(!(study.sensors$id %in% weather.data$station))
missing = which(!(study.sensors$id %in% weather.data$station))
study.sensors$id[missing]
missing = which(!(study.sensors$id %in% weather.data$station))
study.sensors$id[missing]
missing = which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors$id[.]
missing = which(!(study.sensors$id %in% weather.data$station))
study.sensors$id[missing]
missing = which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors$id[.]
missing
which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors$id[.]
which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors[.]
which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors[.,]
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2018-12-31")}) %>%
do.call(rbind, .) # Creates a single data table as output
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2018-12-31")}) %>%
do.call(rbind, .) # Creates a single data table as output
which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors[.,]
library(dplyr, quietly = TRUE)
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02")}) %>%
do.call(rbind, .) # Creates a single data table as output
devtools::install_url('https://uchicago.box.com/shared/static/jwpi7l89t58lm1sukit2tvcdavs5sz5t.zip', quiet = TRUE)
library(epadata)
email = 'lmenendez@uchicago.edu'
key = 'tealmouse67'
PM25.data = EPA.daily.summary(email = email,
key = key,
year.range = 2017:2018,
state.FIPS.list = list(18, 55),
pollutant.code = 88502)
SFO.weather = riem_measures(station = 'KSFO', date_start = "2014-01-01", date_end = '2014-01-02')
devtools::install_github('ropensci/riem')
library(riem,quietly = TRUE)
SFO.weather = riem_measures(station = 'KSFO', date_start = "2014-01-01", date_end = '2014-01-02')
head(SFO.weather)
riem_stations(network = 'IL_ASOS')
networks = list('IL_ASOS', 'IN_ASOS', 'WI_ASOS')
library(dplyr, quietly = TRUE)
station.locs = lapply(networks, riem::riem_stations) %>%
do.call(rbind, .) # Creates a single data table as output
head(station.locs)
station.locs.sf = sf::st_as_sf(station.locs, coords = c("lon", "lat"), crs = 4326)
# Plot stations and study area boundaries to verify that the correct sensors were selected
plot(station.locs.sf$geometry)
plot(sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)$geometry, border = 'red', add = TRUE)
# Loading study area boundaries
study.area = sf::st_read('https://uchicago.box.com/shared/static/uw0srt8nyyjfqo6l0dv07cyskwmv6r50.geojson', quiet = TRUE)
study.sensors = sf::st_join(station.locs.sf, study.area, left = FALSE)
# Verify Spatial Join by Plotting
plot(study.area$geometry, border = 'red')
plot(study.sensors$geometry, add = TRUE)
title('Weather Stations Within the Study Area')
library(dplyr, quietly = TRUE)
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2014-01-02")}) %>%
do.call(rbind, .) # Creates a single data table as output
head(weather.data)
which(!(study.sensors$id %in% weather.data$station)) %>% study.sensors[.,]
weather.data = lapply(study.sensors$id, function(x){riem::riem_measures(x, date_start = "2014-01-01", date_end = "2018-12-31")}) %>%
do.call(rbind, .) # Creates a single data table as output
names(weather.data)
?riem_measures
readr::write_csv(weather.data, path = "TEST.csv")
box_read(548718985316, read_fun = sf::st_read)
library(boxr)
box_auth()
box_read(548718985316, read_fun = sf::st_read)
grid = box_read(548718985316, read_fun = sf::st_read)
saveRDS(grid, file = "TEST.RData")
head(grid)
library(boxr)
box_auth()
grid = box_read(546990633845, read_fun = sf::st_read)
saveRDS(grid, file = "TEST.RData")
library(boxr)
box_auth()
km.grid = box_read(546990633845, read_fun = sf::st_read)
saveRDS(km.grid, file = "TEST.RData")
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(boxr)
box_auth()
km.grid = box_read(546990633845, read_fun = sf::st_read)
save(km.grid, file = "km_grid.RData")
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(sensor2raster)
# STEP 1: Source Data Wrangling Workflow Functions
library(dplyr)
library(sensor2raster)
# STEP 2: Load Grid, Counties, and PM2.5 Data from Box
library(boxr)
box_auth()
km.grid = sensor2raster::km.grid
reference.counties = box_read(546991190612, read_fun = rgdal::readOGR)
PM25.sensor.data = box_read(557214819779, read_fun = readr::read_csv)
# STEP 3: Run Workflow
PM25.raster = Sensor.to.Raster(PM25.sensor.data, data.type = 'EPA', reference.grid = km.grid, reference.counties, year.range = 2014:2018)
# STEP 1: Source Data Wrangling Workflow Functions
library(dplyr)
library(sensor2raster)
# STEP 2: Load Grid, Counties, and PM2.5 Data from Box
library(boxr)
box_auth()
km.grid = sensor2raster::km.grid
reference.counties = box_read(546991190612, read_fun = rgdal::readOGR)
PM25.sensor.data = box_read(557214819779, read_fun = readr::read_csv)
# STEP 3: Run Workflow
PM25.raster = Sensor.to.Raster(PM25.sensor.data, data.type = 'EPA', reference.grid = km.grid, reference.counties)
library(boxr)
box_auth()
km.grid = box_read(546990633845, read_fun = rgdal::readOGR
save(km.grid, file = "km_grid.RData")
km.grid = box_read(546990633845, read_fun = rgdal::readOGR)
save(km.grid, file = "km_grid.RData")
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
# STEP 1: Source Data Wrangling Workflow Functions
library(dplyr)
library(sensor2raster)
# STEP 2: Load Grid, Counties, and PM2.5 Data from Box
library(boxr)
box_auth()
km.grid = sensor2raster::km.grid
reference.counties = box_read(546991190612, read_fun = rgdal::readOGR)
PM25.sensor.data = box_read(557214819779, read_fun = readr::read_csv)
# STEP 3: Run Workflow
PM25.raster = Sensor.to.Raster(PM25.sensor.data, data.type = 'EPA', reference.grid = km.grid, reference.counties)
class(sensor2raster::km.grid)
class(km.grid)
km.grid = box_read(546990633845, read_fun = rgdal::readOGR)
save(km.grid, file = "km_grid.RData")
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
km.grid
library(sensor2raster)
sensor2raster::km.grid
# STEP 1: Source Data Wrangling Workflow Functions
library(dplyr)
library(sensor2raster)
# STEP 2: Load Grid, Counties, and PM2.5 Data from Box
library(boxr)
box_auth()
km.grid = sensor2raster::km.grid
reference.counties = box_read(546991190612, read_fun = rgdal::readOGR)
PM25.sensor.data = box_read(557214819779, read_fun = readr::read_csv)
# STEP 3: Run Workflow
PM25.raster = Sensor.to.Raster(PM25.sensor.data, data.type = 'EPA', reference.grid = km.grid, reference.counties)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(sensor2raster)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
Next, we run the *Sensor.to.Raster* function on a sample EPA dataset of PM2.5 readings across Indiana and Wisconsin in 2017 and 2018. For more information on obtaining this dataset, see [above](#first.query).
library(boxr)
box_auth()
study.counties = box_read(543244636825, read_fun = rgdal::readOGR)
save(study.counties, file = "study_counties.RData")
library(epadata)
state.list()
state.list(email = 'lmenendez@uchicago.edu', key = 'tealmouse67')
library(epadata)
PM25.data = EPA.daily.summary(email = 'lmenendez@uchicago.edu',
key = 'tealmouse67',
year.range = 2017:2018,
state.FIPS.list = list(17, 18, 55),
pollutant.code = 88502)
head(PM25.data)
save(PM25.data, file = 'PM25.data.RData')
save(PM25.data, file = 'PM25_data.RData')
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(sensor2raster)
sensor2raster::km.grid
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip')
library(sensor2raster)
sensor2raster::km.grid
sensor2raster::PM25.data
PM25.data
sample.counties = box_read(543244636825, read_fun = rgdal::readOGR)
save(sample.counties, file = "study_counties.RData")
library(epadata)
sample.data = EPA.daily.summary(email = 'lmenendez@uchicago.edu',
key = 'tealmouse67',
year.range = 2017:2018,
state.FIPS.list = list(17, 18, 55),
pollutant.code = 88502)
save(sample.data, file = 'sample_data.RData')
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
library(sensor2raster)
library(sensor2raster)
sensor2raster::sample.data
sample.data
data(sample.data)
data(sample.data, package = 'sensor2raster')
data(km.grid, package = 'sensor2raster')
get(sample.data)
devtools::use_data(sample.data)
?use_data
usethis::use_data(sample.data)
devtools::install_url('https://uchicago.box.com/shared/static/zxyxu4mzx8wt1bm7s6jg5lft7ntyr2e0.zip', quiet = TRUE)
library(sensor2raster)
library(sensor2raster)
data("sample.counties")
data("sample.counties", package = 'sensor2raster')
sdample.counties
sample.counties
sensor2raster::sample.counties
sample.data
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/8uqh1xcevtpfvrvg42snqvyofvlauphh.zip', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.gz', quiet = TRUE)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
?group_by
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::uninstall('sensor2raster')
remove.packages("sensor2raster")
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
# Loading sample data from package
data("sample.data", package = 'sensor2raster')
data("sample.counties", package = 'sensor2raster')
data("km.grid", package = 'sensor2raster')
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz', quiet = TRUE)
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
library(sensor2raster)
detach("package:sensor2raster", unload = TRUE)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
devtools::install_url('https://uchicago.box.com/shared/static/u57vxg90ytieu86ow3m8xats3ebmfek4.tar.gz')
library(sensor2raster)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
raster = Sensor.to.Raster(Sensor.data = sample.data, data.type = 'EPA', reference.grid = km.grid, counties = sample.counties)
raster[[1]]
raster[[1]]$M1.2017
raster[[2]][[1]]
raster[[2]][[2]]
raster$Monthly_Vector_Data
raster$Monthly_Vector_Data$M3.2017
plot(raster$Quarterly_Raster_Data$Q1.2017)
class(raster$Quarterly_Raster_Data$Q1.2017)
raster::plot(raster$Quarterly_Raster_Data$Q1.2017)
raster::plot(raster$Quarterly_Raster_Data$Q1.2017)
plot(sample.counties, add = TRUE)
raster::plot(raster$Quarterly_Raster_Data$Q1.2017)
base::plot(sample.counties, add = TRUE)
raster::plot(raster$Quarterly_Raster_Data$Q1.2017)
sp::plot(sample.counties, add = TRUE)
raster::plot(raster$Quarterly_Raster_Data$Q1.2017, title = 'TEST)
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
raster::plot(raster$Quarterly_Raster_Data$Q1.2017, title = 'TEST')
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
raster::plot(raster$Quarterly_Raster_Data$Q1.2017, main = 'TEST')
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
raster::plot(raster$Quarterly_Raster_Data$Q1.2017, main = 'Average PM2.5 Levels in Q1 2017')
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
raster::plot(raster$Quarterly_Raster_Data$Q1.2017, main = 'Average Observed PM2.5 Levels in Q1 2017')
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
raster::plot(raster$Monthly_Raster_Data$M1.2017, main = 'Average Observed PM2.5 Levels in Jan 2017')
sp::plot(sample.counties, add = TRUE) # Adding county boundaries for reference
head(raster$Monthly_Vector_Data)
names(raster$Monthly_Vector_Data)
raster$Monthly_Vector_Data[1,]
raster$Monthly_Vector_Data[1,]
plot(raster$Monthly_Vector_Data[1,])
raster$Monthly_Vector_Data[1,]
sp::plot(raster$Monthly_Vector_Data[1,])
raster$Monthly_Vector_Data[1,]
sp::plot(raster$Monthly_Vector_Data)
raster$Monthly_Vector_Data[1,]
as.data.frame(raster$Monthly_Vector_Data[1,])
as.data.frame(raster$Monthly_Vector_Data[5,])
as.data.frame(raster$Monthly_Vector_Data[1:5,])
?idw
devtools::install_url('https://uchicago.box.com/shared/static/jwpi7l89t58lm1sukit2tvcdavs5sz5t.zip', quiet = TRUE)
library(epadata)
email = 'lmenendez@uchicago.edu'
key = 'tealmouse67'
states.FIPS.list()
epadata::state.list()
epadata::state.list(email, key)
# Querying Data
PM25.data = EPA.daily.summary(email = email,
key = key,
year.range = 2018:2018,
state.FIPS.list = list(17, 18, 55, 26),
pollutant.code = 88502)
head(PM25.data)
# Filtering for Aug 2018
class(PM25.data$date_local[1])
# Filtering for Aug 2018
ymd(PM25.data$date_local[1])
# Filtering for Aug 2018
lubridate::ymd(PM25.data$date_local[1])
# Filtering for Aug 2018
PM25.Aug18 = PM25.data %>%
mutate(date_local = lubridate::ymd(date_local))
# Filtering for Aug 2018
library(dplyr)
PM25.Aug18 = PM25.data %>%
mutate(date_local = lubridate::ymd(date_local))
library(lubridate)
Aug18 = interval(ymd(20180801), ymd(20180831))
Aug18
PM25.Aug18 = PM25.data %>%
mutate(date_local = ymd(date_local)) %>%
filter(date_local %within% Aug18)
PM25.Aug18
View(PM25.Aug18)
# Getting Sensor Locations
PM25.Aug18.Sensors = st_as_sf(PM25.Aug18, coords = c("longitude", "latitude"), crs = 4326)
# Getting Sensor Locations
PM25.Aug18.Sensors = sf::st_as_sf(PM25.Aug18, coords = c("longitude", "latitude"), crs = 4326)
plot(PM25.Aug18.Sensors)
plot(PM25.Aug18.Sensors$geometry)
count(PM25.Aug18)
count(PM25.Aug18.Sensors)
# Getting Sensor Locations
PM25.Aug18.Sensors = sf::st_as_sf(PM25.Aug18, coords = c("longitude", "latitude"), crs = 4326) %>% unique()
PM25.Aug18.Sensors
# Getting Sensor Locations
PM25.Aug18.Sensors = sf::st_as_sf(PM25.Aug18, coords = c("longitude", "latitude"), crs = 4326) %>%
select(city, state)
PM25.Aug18.Sensors
# Getting Sensor Locations
PM25.Aug18.Sensors = sf::st_as_sf(PM25.Aug18, coords = c("longitude", "latitude"), crs = 4326) %>%
select(city, state) %>%
unique()
PM25.Aug18.Sensors
View(PM25.Aug18.Sensors)
# Export Data
readr::write_csv(PM25.Aug18, path = "PM25_4States_Aug2018_DATA")
sf::st_write(PM25.Aug18.Sensors, dsn = "PM25_4States_Aug2018_POINTLOCS")
# Export Data
readr::write_csv(PM25.Aug18, path = "PM25_4States_Aug2018_DATA.csv")
sf::st_write(PM25.Aug18.Sensors, dsn = "PM25_4States_Aug2018_POINTLOCS.geojson")
setwd("~/Google Drive/2019-2020 Homework/bloomberg-airq/EPA_Data/PM2.5")
# Export Data
readr::write_csv(PM25.Aug18, path = "PM25_4States_Aug2018_DATA.csv")
sf::st_write(PM25.Aug18.Sensors, dsn = "PM25_4States_Aug2018_POINTLOCS.geojson")
variable.list(email, key, class = 'ALL')
